// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: task.sql

package db

import (
	"context"
)

const createNewTask = `-- name: CreateNewTask :one
INSERT INTO tasks (
  user_id,
  content,
  status,
  estimate_pomos,
  progress_pomos
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, user_id, content, status, estimate_pomos, progress_pomos, created_at, completed_at
`

type CreateNewTaskParams struct {
	UserID        int64  `json:"user_id"`
	Content       string `json:"content"`
	Status        int32  `json:"status"`
	EstimatePomos int32  `json:"estimate_pomos"`
	ProgressPomos int32  `json:"progress_pomos"`
}

func (q *Queries) CreateNewTask(ctx context.Context, arg CreateNewTaskParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, createNewTask,
		arg.UserID,
		arg.Content,
		arg.Status,
		arg.EstimatePomos,
		arg.ProgressPomos,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.Status,
		&i.EstimatePomos,
		&i.ProgressPomos,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const getTaskById = `-- name: GetTaskById :one
SELECT id, user_id, name, color, duration, shortbreak, longbreak, longbreakinterval, autostart_break, goalperday FROM types
WHERE id = $1 AND user_id = $2 LIMIT 1
`

type GetTaskByIdParams struct {
	ID     int64 `json:"id"`
	UserID int64 `json:"user_id"`
}

func (q *Queries) GetTaskById(ctx context.Context, arg GetTaskByIdParams) (Type, error) {
	row := q.db.QueryRowContext(ctx, getTaskById, arg.ID, arg.UserID)
	var i Type
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Color,
		&i.Duration,
		&i.Shortbreak,
		&i.Longbreak,
		&i.Longbreakinterval,
		&i.AutostartBreak,
		&i.Goalperday,
	)
	return i, err
}

const listTasks = `-- name: ListTasks :many
SELECT id, user_id, content, status, estimate_pomos, progress_pomos, created_at, completed_at FROM tasks
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListTasks(ctx context.Context, userID int64) ([]Task, error) {
	rows, err := q.db.QueryContext(ctx, listTasks, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Task{}
	for rows.Next() {
		var i Task
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Content,
			&i.Status,
			&i.EstimatePomos,
			&i.ProgressPomos,
			&i.CreatedAt,
			&i.CompletedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTaskConfig = `-- name: UpdateTaskConfig :one
UPDATE tasks
SET     content = $3,
        estimate_pomos = $4
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, content, status, estimate_pomos, progress_pomos, created_at, completed_at
`

type UpdateTaskConfigParams struct {
	ID            int64  `json:"id"`
	UserID        int64  `json:"user_id"`
	Content       string `json:"content"`
	EstimatePomos int32  `json:"estimate_pomos"`
}

func (q *Queries) UpdateTaskConfig(ctx context.Context, arg UpdateTaskConfigParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskConfig,
		arg.ID,
		arg.UserID,
		arg.Content,
		arg.EstimatePomos,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.Status,
		&i.EstimatePomos,
		&i.ProgressPomos,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}

const updateTaskStatus = `-- name: UpdateTaskStatus :one
UPDATE tasks
SET     status = $3,
        progress_pomos = $4
WHERE id = $1 AND user_id = $2
RETURNING id, user_id, content, status, estimate_pomos, progress_pomos, created_at, completed_at
`

type UpdateTaskStatusParams struct {
	ID            int64 `json:"id"`
	UserID        int64 `json:"user_id"`
	Status        int32 `json:"status"`
	ProgressPomos int32 `json:"progress_pomos"`
}

func (q *Queries) UpdateTaskStatus(ctx context.Context, arg UpdateTaskStatusParams) (Task, error) {
	row := q.db.QueryRowContext(ctx, updateTaskStatus,
		arg.ID,
		arg.UserID,
		arg.Status,
		arg.ProgressPomos,
	)
	var i Task
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Content,
		&i.Status,
		&i.EstimatePomos,
		&i.ProgressPomos,
		&i.CreatedAt,
		&i.CompletedAt,
	)
	return i, err
}
