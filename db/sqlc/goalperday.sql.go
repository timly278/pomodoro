// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: goalperday.sql

package db

import (
	"context"
)

const createNewGoal = `-- name: CreateNewGoal :one
INSERT INTO goalperday (
  user_id,
  pomonum,
  type_id
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, type_id, pomonum, created_at, changed_at
`

type CreateNewGoalParams struct {
	UserID  int64 `json:"user_id"`
	Pomonum int32 `json:"pomonum"`
	TypeID  int64 `json:"type_id"`
}

func (q *Queries) CreateNewGoal(ctx context.Context, arg CreateNewGoalParams) (Goalperday, error) {
	row := q.db.QueryRowContext(ctx, createNewGoal, arg.UserID, arg.Pomonum, arg.TypeID)
	var i Goalperday
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TypeID,
		&i.Pomonum,
		&i.CreatedAt,
		&i.ChangedAt,
	)
	return i, err
}

const deleteGoal = `-- name: DeleteGoal :exec
DELETE FROM goalperday
WHERE id = $1
`

func (q *Queries) DeleteGoal(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteGoal, id)
	return err
}

const listGoals = `-- name: ListGoals :many
SELECT id, user_id, type_id, pomonum, created_at, changed_at FROM goalperday
WHERE user_id = $1
ORDER BY id
`

func (q *Queries) ListGoals(ctx context.Context, userID int64) ([]Goalperday, error) {
	rows, err := q.db.QueryContext(ctx, listGoals, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Goalperday{}
	for rows.Next() {
		var i Goalperday
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TypeID,
			&i.Pomonum,
			&i.CreatedAt,
			&i.ChangedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoal = `-- name: UpdateGoal :one
UPDATE goalperday
SET    
    pomonum = $2,
    type_id = $3
WHERE id = $1
RETURNING id, user_id, type_id, pomonum, created_at, changed_at
`

type UpdateGoalParams struct {
	ID      int64 `json:"id"`
	Pomonum int32 `json:"pomonum"`
	TypeID  int64 `json:"type_id"`
}

func (q *Queries) UpdateGoal(ctx context.Context, arg UpdateGoalParams) (Goalperday, error) {
	row := q.db.QueryRowContext(ctx, updateGoal, arg.ID, arg.Pomonum, arg.TypeID)
	var i Goalperday
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TypeID,
		&i.Pomonum,
		&i.CreatedAt,
		&i.ChangedAt,
	)
	return i, err
}
