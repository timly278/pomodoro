// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: pomodoro.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createPomodoroWithNoTask = `-- name: CreatePomodoroWithNoTask :one
INSERT INTO pomodoros (
  user_id,
  type_id,
  focus_degree
) VALUES (
  $1, $2, $3
) RETURNING id, user_id, type_id, task_id, focus_degree, created_at
`

type CreatePomodoroWithNoTaskParams struct {
	UserID      int64 `json:"user_id"`
	TypeID      int64 `json:"type_id"`
	FocusDegree int32 `json:"focus_degree"`
}

func (q *Queries) CreatePomodoroWithNoTask(ctx context.Context, arg CreatePomodoroWithNoTaskParams) (Pomodoro, error) {
	row := q.db.QueryRowContext(ctx, createPomodoroWithNoTask, arg.UserID, arg.TypeID, arg.FocusDegree)
	var i Pomodoro
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TypeID,
		&i.TaskID,
		&i.FocusDegree,
		&i.CreatedAt,
	)
	return i, err
}

const createPomodoroWithTask = `-- name: CreatePomodoroWithTask :one
INSERT INTO pomodoros (
  user_id,
  type_id,
  task_id,
  focus_degree
) VALUES (
  $1, $2, $3, $4
) RETURNING id, user_id, type_id, task_id, focus_degree, created_at
`

type CreatePomodoroWithTaskParams struct {
	UserID      int64         `json:"user_id"`
	TypeID      int64         `json:"type_id"`
	TaskID      sql.NullInt64 `json:"task_id"`
	FocusDegree int32         `json:"focus_degree"`
}

func (q *Queries) CreatePomodoroWithTask(ctx context.Context, arg CreatePomodoroWithTaskParams) (Pomodoro, error) {
	row := q.db.QueryRowContext(ctx, createPomodoroWithTask,
		arg.UserID,
		arg.TypeID,
		arg.TaskID,
		arg.FocusDegree,
	)
	var i Pomodoro
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TypeID,
		&i.TaskID,
		&i.FocusDegree,
		&i.CreatedAt,
	)
	return i, err
}

const getPomodoroByDate = `-- name: GetPomodoroByDate :many
SELECT t.goalperday, p.focus_degree, t.name as type_name, t.color as type_color, t.duration
FROM pomodoros p, types t 
WHERE t.id = p.type_id
AND (p.created_at::DATE) = $4::DATE AND p.user_id = $1
ORDER BY p.type_id
LIMIT $2
OFFSET $3
`

type GetPomodoroByDateParams struct {
	UserID    int64     `json:"user_id"`
	Limit     int32     `json:"limit"`
	Offset    int32     `json:"offset"`
	QueryDate time.Time `json:"query_date"`
}

type GetPomodoroByDateRow struct {
	Goalperday  int32  `json:"goalperday"`
	FocusDegree int32  `json:"focus_degree"`
	TypeName    string `json:"type_name"`
	TypeColor   string `json:"type_color"`
	Duration    int32  `json:"duration"`
}

func (q *Queries) GetPomodoroByDate(ctx context.Context, arg GetPomodoroByDateParams) ([]GetPomodoroByDateRow, error) {
	rows, err := q.db.QueryContext(ctx, getPomodoroByDate,
		arg.UserID,
		arg.Limit,
		arg.Offset,
		arg.QueryDate,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetPomodoroByDateRow{}
	for rows.Next() {
		var i GetPomodoroByDateRow
		if err := rows.Scan(
			&i.Goalperday,
			&i.FocusDegree,
			&i.TypeName,
			&i.TypeColor,
			&i.Duration,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPomodoroByUserId = `-- name: GetPomodoroByUserId :many
SELECT id, user_id, type_id, task_id, focus_degree, created_at FROM pomodoros
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetPomodoroByUserId(ctx context.Context, userID int64) ([]Pomodoro, error) {
	rows, err := q.db.QueryContext(ctx, getPomodoroByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Pomodoro{}
	for rows.Next() {
		var i Pomodoro
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.TypeID,
			&i.TaskID,
			&i.FocusDegree,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
