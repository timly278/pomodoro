// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  email
) VALUES (
  $1, $2, $3
) RETURNING id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, session_state
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.SessionState,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, session_state FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.SessionState,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, session_state FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.SessionState,
	)
	return i, err
}

const updatePassword = `-- name: UpdatePassword :one
UPDATE users
SET hashed_password = $2,
    password_changed_at = $3
WHERE id = $1
RETURNING id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, session_state
`

type UpdatePasswordParams struct {
	ID                int64     `json:"id"`
	HashedPassword    string    `json:"hashed_password"`
	PasswordChangedAt time.Time `json:"password_changed_at"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg UpdatePasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updatePassword, arg.ID, arg.HashedPassword, arg.PasswordChangedAt)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.SessionState,
	)
	return i, err
}

const updateRefreshToken = `-- name: UpdateRefreshToken :one
UPDATE users
SET refresh_token = $2
WHERE id = $1
RETURNING id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, session_state
`

type UpdateRefreshTokenParams struct {
	ID           int64  `json:"id"`
	RefreshToken string `json:"refresh_token"`
}

func (q *Queries) UpdateRefreshToken(ctx context.Context, arg UpdateRefreshTokenParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateRefreshToken, arg.ID, arg.RefreshToken)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.SessionState,
	)
	return i, err
}

const updateUserSetting = `-- name: UpdateUserSetting :one
UPDATE users
SET   username = $2,
      alarm_sound = $3,
      repeat_alarm = $4
WHERE id = $1
RETURNING id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, session_state
`

type UpdateUserSettingParams struct {
	ID          int64  `json:"id"`
	Username    string `json:"username"`
	AlarmSound  string `json:"alarm_sound"`
	RepeatAlarm int32  `json:"repeat_alarm"`
}

func (q *Queries) UpdateUserSetting(ctx context.Context, arg UpdateUserSettingParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserSetting,
		arg.ID,
		arg.Username,
		arg.AlarmSound,
		arg.RepeatAlarm,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.SessionState,
	)
	return i, err
}

const updateVerifyEmail = `-- name: UpdateVerifyEmail :one
UPDATE users
SET email_verified = $2
WHERE id = $1
RETURNING id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, session_state
`

type UpdateVerifyEmailParams struct {
	ID            int64 `json:"id"`
	EmailVerified bool  `json:"email_verified"`
}

func (q *Queries) UpdateVerifyEmail(ctx context.Context, arg UpdateVerifyEmailParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateVerifyEmail, arg.ID, arg.EmailVerified)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.SessionState,
	)
	return i, err
}
