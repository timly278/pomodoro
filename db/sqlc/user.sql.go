// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
  username,
  hashed_password,
  email
) VALUES (
  $1, $2, $3
) RETURNING id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, is_blocked
`

type CreateUserParams struct {
	Username       string `json:"username"`
	HashedPassword string `json:"hashed_password"`
	Email          string `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.HashedPassword, arg.Email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.IsBlocked,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, is_blocked FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.IsBlocked,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, is_blocked FROM users
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.IsBlocked,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
SET username = coalesce($1, username),
    refresh_token = coalesce($2, refresh_token),
    email_verified = coalesce($3, email_verified),
    hashed_password = coalesce($4, hashed_password),
    password_changed_at = coalesce($5, password_changed_at),
    alarm_sound = coalesce($6, alarm_sound),
    repeat_alarm = coalesce($7, repeat_alarm),
    is_blocked = coalesce($8, is_blocked)
WHERE id = coalesce($9, 0) OR email = coalesce($10, '')
RETURNING id, username, hashed_password, email, password_changed_at, created_at, alarm_sound, repeat_alarm, email_verified, refresh_token, is_blocked
`

type UpdateUserParams struct {
	Username          sql.NullString `json:"username"`
	RefreshToken      sql.NullString `json:"refresh_token"`
	EmailVerified     sql.NullBool   `json:"email_verified"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	AlarmSound        sql.NullString `json:"alarm_sound"`
	RepeatAlarm       sql.NullInt32  `json:"repeat_alarm"`
	IsBlocked         sql.NullBool   `json:"is_blocked"`
	ID                sql.NullInt64  `json:"id"`
	Email             sql.NullString `json:"email"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Username,
		arg.RefreshToken,
		arg.EmailVerified,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.AlarmSound,
		arg.RepeatAlarm,
		arg.IsBlocked,
		arg.ID,
		arg.Email,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.HashedPassword,
		&i.Email,
		&i.PasswordChangedAt,
		&i.CreatedAt,
		&i.AlarmSound,
		&i.RepeatAlarm,
		&i.EmailVerified,
		&i.RefreshToken,
		&i.IsBlocked,
	)
	return i, err
}
