// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.22.0
// source: report.sql

package db

import (
	"context"
)

const getDaysAccessedInMonth = `-- name: GetDaysAccessedInMonth :one
SELECT count(*) FROM
(
    SELECT EXTRACT(day FROM created_at) as day FROM pomodoros 
    WHERE user_id = $1
    AND EXTRACT(MONTH FROM created_at) = $2::int
    GROUP BY day
) as x LIMIT 1
`

type GetDaysAccessedInMonthParams struct {
	UserID  int64 `json:"user_id"`
	MonthID int32 `json:"month_id"`
}

func (q *Queries) GetDaysAccessedInMonth(ctx context.Context, arg GetDaysAccessedInMonthParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getDaysAccessedInMonth, arg.UserID, arg.MonthID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getMinutesFocusedInMonth = `-- name: GetMinutesFocusedInMonth :one

SELECT SUM(duration) as minutefocused FROM
(
    SELECT t.duration, p.created_at, p.type_id, p.user_id FROM 
	types as t, pomodoros as p
	WHERE t.id = p.type_id 
	AND p.user_id = $1 
	AND EXTRACT(MONTH FROM created_at) = $2::int
) as x LIMIT 1
`

type GetMinutesFocusedInMonthParams struct {
	UserID  int64 `json:"user_id"`
	MonthID int32 `json:"month_id"`
}

// todo: GetDaysAccessedInYear :one
func (q *Queries) GetMinutesFocusedInMonth(ctx context.Context, arg GetMinutesFocusedInMonthParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, getMinutesFocusedInMonth, arg.UserID, arg.MonthID)
	var minutefocused int64
	err := row.Scan(&minutefocused)
	return minutefocused, err
}

const getTotalDaysAccessed = `-- name: GetTotalDaysAccessed :one
SELECT count(*) as count FROM
(
  SELECT (created_at::DATE) as days
  FROM pomodoros where user_id = $1 
  GROUP BY (created_at::DATE)
) as x LIMIT 1
`

func (q *Queries) GetTotalDaysAccessed(ctx context.Context, userID int64) (int64, error) {
	row := q.db.QueryRowContext(ctx, getTotalDaysAccessed, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
