// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: auth.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthHandlersClient is the client API for AuthHandlers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthHandlersClient interface {
	Register(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserResponse, error)
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error)
}

type authHandlersClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthHandlersClient(cc grpc.ClientConnInterface) AuthHandlersClient {
	return &authHandlersClient{cc}
}

func (c *authHandlersClient) Register(ctx context.Context, in *CreateUserRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthHandlers/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authHandlersClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*UserLoginResponse, error) {
	out := new(UserLoginResponse)
	err := c.cc.Invoke(ctx, "/pb.AuthHandlers/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthHandlersServer is the server API for AuthHandlers service.
// All implementations must embed UnimplementedAuthHandlersServer
// for forward compatibility
type AuthHandlersServer interface {
	Register(context.Context, *CreateUserRequest) (*UserResponse, error)
	Login(context.Context, *LoginRequest) (*UserLoginResponse, error)
	mustEmbedUnimplementedAuthHandlersServer()
}

// UnimplementedAuthHandlersServer must be embedded to have forward compatible implementations.
type UnimplementedAuthHandlersServer struct {
}

func (UnimplementedAuthHandlersServer) Register(context.Context, *CreateUserRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedAuthHandlersServer) Login(context.Context, *LoginRequest) (*UserLoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedAuthHandlersServer) mustEmbedUnimplementedAuthHandlersServer() {}

// UnsafeAuthHandlersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthHandlersServer will
// result in compilation errors.
type UnsafeAuthHandlersServer interface {
	mustEmbedUnimplementedAuthHandlersServer()
}

func RegisterAuthHandlersServer(s grpc.ServiceRegistrar, srv AuthHandlersServer) {
	s.RegisterService(&AuthHandlers_ServiceDesc, srv)
}

func _AuthHandlers_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthHandlersServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthHandlers/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthHandlersServer).Register(ctx, req.(*CreateUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthHandlers_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthHandlersServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.AuthHandlers/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthHandlersServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthHandlers_ServiceDesc is the grpc.ServiceDesc for AuthHandlers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthHandlers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.AuthHandlers",
	HandlerType: (*AuthHandlersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _AuthHandlers_Register_Handler,
		},
		{
			MethodName: "Login",
			Handler:    _AuthHandlers_Login_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
